{{- define "client" -}}
{{- $typeMap := .TypeMap -}}

{{- if .Services}}
#
# Imports
#
import json
import requests
from typing import Optional, Dict

#
# Client
#

{{- range .Services}}
class {{.Name}}:
    CONTENT_TYPE_JSON = {'Content-Type': 'application/json'}

    def __init__(self, hostname: str):
        self.hostname = hostname
        self.path = '/rpc/{{.Name}}/'

    def url(self, name: str) -> str:
        return f"{self.hostname}{self.path}{name}"

    def _send_request(self, method_name: str, args, headers: Optional[Dict[str, str]] = None):
        url = self.url(method_name)
        headers = headers or self.CONTENT_TYPE_JSON
        body = json.dumps(args.to_dict())
        try:
            response = requests.post(url, headers=headers, data=body)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as ex:
            print(ex)
            raise WebrpcRequestFailedError

    {{- range .Methods}}
    def {{.Name}}(self, args: {{.Name}}Args, headers: Optional[Dict[str, str]] = None):
        response_data = self._send_request('{{.Name}}', args, headers)
        return {{.Name}}Return(**response_data)
    {{- end}}
{{- end}}
{{- end}}
{{- end -}}
