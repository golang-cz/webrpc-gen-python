# --
# Code generated by webrpc-gen@v0.14.0-dev with ../../ generator. DO NOT EDIT.

# WebRPC description and code-gen version
WebRPCVersion = "v1"

# Schema version of your RIDL schema
WebRPCSchemaVersion = "v1.0.0"

# Schema hash generated from your RIDL schema
WebRPCSchemaHash = "2167bb6fb0a186ff099cd8a309c6ffbbd7d1b9c0"

#
# Imports
#
from enum import Enum
from abc import ABC
import dataclasses
from dataclasses import dataclass
from typing import List, Dict, Any
import json
#
# Types
#

@dataclass
class BaseDataClass(ABC):
    def to_dict(self):
        return dataclasses.asdict(self)


class Kind(Enum):
  USER = 'USER'
  ADMIN = 'ADMIN'

@dataclass
class User(BaseDataClass):
        ID : int
        username : str
        role : Kind
        meta : Dict[str, Any]
        
        
        
        
        
        
        
        createdAt : str = None



@dataclass
class Page(BaseDataClass):
        num : int
        



@dataclass
class PingArgs(BaseDataClass):
    pass



@dataclass
class PingReturn(BaseDataClass):
    pass
@dataclass
class GetUserArgs(BaseDataClass):
    userID:  int




@dataclass
class GetUserReturn(BaseDataClass):
    code: int
    user: User








#
# Imports
#
import json
import urllib.request
from urllib.error import HTTPError
from typing import Optional, Dict

#
# Client
#
class ExampleService:
    CONTENT_TYPE_JSON = {'Content-Type': 'application/json'}

    def __init__(self, hostname: str):
        self.hostname = hostname
        self.path = '/rpc/ExampleService/'

    def url(self, name: str) -> str:
        return f"{self.hostname}{self.path}{name}"

    def _send_request(self, method_name: str, args, headers: Optional[Dict[str, str]] = None):
        url = self.url(method_name)
        headers = headers or self.CONTENT_TYPE_JSON
        body = json.dumps(args.to_dict()).encode('utf-8')  # Encode to bytes
        req = urllib.request.Request(url, data=body, headers=headers)

        try:
            with urllib.request.urlopen(req) as response:
                response_data = json.loads(response.read().decode('utf-8'))
            return response_data
        except HTTPError as ex:  # Catch only HTTPError
            error_body = ex.read().decode('utf-8')  # Read the response body
            try:
                error_data = json.loads(error_body)  # Attempt to parse it as JSON
            except json.JSONDecodeError:
                error_data = {"error": "Unknown", "message": error_body}
            
            # Directly raise your custom exception
            raise WebrpcRequestFailedError(
                message=error_data.get('msg', 'Unknown error'),
                code=error_data.get('code', -1),
                cause=error_data.get('cause'),
                status=error_data.get('status')
            )
    def Ping(self, args: PingArgs, headers: Optional[Dict[str, str]] = None):
        response_data = self._send_request('Ping', args, headers)
        return PingReturn(**response_data)
    def GetUser(self, args: GetUserArgs, headers: Optional[Dict[str, str]] = None):
        response_data = self._send_request('GetUser', args, headers)
        return GetUserReturn(**response_data)
class WebrpcError(Exception):
    def __init__(self, name=None, code=0, message=None, status=0, cause=None):
        super().__init__(message)
        self.name = name or "WebrpcError"
        self.code = code if isinstance(code, int) else 0
        self.message = message or f"endpoint error {self.code}"
        self.status = status if isinstance(status, int) else 0
        self.cause = cause

    @classmethod
    def new(cls, payload):
        return cls(
            payload.get("error"),
            payload.get("code", 0),
            payload.get("message") or payload.get("msg"),
            payload.get("status", 0),
            payload.get("cause"),
        )


# Webrpc errors

class WebrpcEndpointError(WebrpcError):
    def __init__(self, name="WebrpcEndpoint", code=0, message="endpoint error", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
class WebrpcRequestFailedError(WebrpcError):
    def __init__(self, name="WebrpcRequestFailed", code=-1, message="request failed", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
class WebrpcBadRouteError(WebrpcError):
    def __init__(self, name="WebrpcBadRoute", code=-2, message="bad route", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
class WebrpcBadMethodError(WebrpcError):
    def __init__(self, name="WebrpcBadMethod", code=-3, message="bad method", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
class WebrpcBadRequestError(WebrpcError):
    def __init__(self, name="WebrpcBadRequest", code=-4, message="bad request", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
class WebrpcBadResponseError(WebrpcError):
    def __init__(self, name="WebrpcBadResponse", code=-5, message="bad response", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
class WebrpcServerPanicError(WebrpcError):
    def __init__(self, name="WebrpcServerPanic", code=-6, message="server panic", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
class WebrpcInternalErrorError(WebrpcError):
    def __init__(self, name="WebrpcInternalError", code=-7, message="internal error", status=0, cause=None):
        super().__init__(name, code, message, status, cause)

# Schema errors


errors = {
    "WebrpcEndpoint": "WebrpcEndpoint",
    "WebrpcRequestFailed": "WebrpcRequestFailed",
    "WebrpcBadRoute": "WebrpcBadRoute",
    "WebrpcBadMethod": "WebrpcBadMethod",
    "WebrpcBadRequest": "WebrpcBadRequest",
    "WebrpcBadResponse": "WebrpcBadResponse",
    "WebrpcServerPanic": "WebrpcServerPanic",
    "WebrpcInternalError": "WebrpcInternalError",
}

webrpc_error_by_code = {
    0: WebrpcEndpointError,
    -1: WebrpcRequestFailedError,
    -2: WebrpcBadRouteError,
    -3: WebrpcBadMethodError,
    -4: WebrpcBadRequestError,
    -5: WebrpcBadResponseError,
    -6: WebrpcServerPanicError,
    -7: WebrpcInternalErrorError,
}

