# --
# Code generated by webrpc-gen@v0.11.0 with custom generator. DO NOT EDIT.

# WebRPC description and code-gen version
WebRPCVersion = "v1"

# Schema version of your RIDL schema
WebRPCSchemaVersion = "v1.0.0"

# Schema hash generated from your RIDL schema
WebRPCSchemaHash = "2167bb6fb0a186ff099cd8a309c6ffbbd7d1b9c0"

#
# Imports
#
from enum import Enum
from abc import ABC, abstractmethod
from dataclasses import dataclass
import typing
#
# Types
#
@dataclass
class PingReturn(ABC):
    pass

@dataclass
class PingArgs(ABC):
    pass
@dataclass
class GetUserReturn(ABC):
    pass

@dataclass
class GetUserArgs(ABC):
    pass

class ExampleService(ABC):
    @abstractmethod
    def Ping(self, headers=dict()) -> PingReturn:
        pass
    @abstractmethod
    def GetUser(self, headers=dict()) -> GetUserReturn:
        pass


  
#
# Imports
#
import json
import requests

#
# Client
#
class ExampleServiceClient:
    def __init__(self, hostname):
        self.hostname = hostname
        self.path = '/rpc/ExampleService/'

    def url(self, name):
        return f"{self.hostname}{self.path}{name}"
    def ping(self, headers=dict()):
        url = self.url('Ping')
        headers = {'Content-Type': 'application/json'}
        body = json.dumps(PingArgs(headers=dict()).__dict__)

        try:
            response = requests.post(url, headers=headers, data=body)
            response.raise_for_status()

            response_data = response.json()
            return PingReturn(**response_data)
        except requests.exceptions.HTTPError as error:
            print(f"HTTP Error: {error}")
        except requests.exceptions.RequestException as error:
            print(f"Request Exception: {error}")
    def getUser(self, headers=dict()):
        url = self.url('GetUser')
        headers = {'Content-Type': 'application/json'}
        body = json.dumps(GetUserArgs(headers=dict()).__dict__)

        try:
            response = requests.post(url, headers=headers, data=body)
            response.raise_for_status()

            response_data = response.json()
            return GetUserReturn(**response_data)
        except requests.exceptions.HTTPError as error:
            print(f"HTTP Error: {error}")
        except requests.exceptions.RequestException as error:
            print(f"Request Exception: {error}")
  
#
# Imports
#
import json
from typing import Any, Dict, Union

class WebRPCError(Exception):
    def __init__(self, code: str, msg: str, status: int) -> None:
        self.code = code
        self.msg = msg
        self.status = status

def create_http_request(body: Dict[str, Any] = {}, headers: Dict[str, Any] = {}) -> Dict[str, Any]:
    return {
        "method": "POST",
        "headers": {**headers, "Content-Type": "application/json"},
        "body": json.dumps(body)
    }

async def build_response(res: Union[Dict[str, Any], None]) -> Any:
    text = await res.text()
    try:
        data = json.loads(text)
    except json.JSONDecodeError:
        raise WebRPCError('unknown', f"expecting JSON, got: {text}", res.status) from None

    if not res.ok:
        raise data  # webrpc error response

    return data

