{{define "types"}}
{{- $typeMap := .TypeMap -}}
{{- $types := .Types -}}
{{- $services := .Services -}}

#
# Imports
#
from enum import Enum
from abc import ABC
import dataclasses
from dataclasses import dataclass
from typing import List, Dict
import json
#
# Types
#

@dataclass
class BaseDataClass(ABC):
    def to_dict(self):
        return dataclasses.asdict(self)

{{if $types -}}
{{range $_i, $type := $types -}}


{{if isEnumType $type }}
class {{$type.Name}}(Enum):
{{- range $i, $field := $type.Fields}}
  {{$field.Name}} = '{{$field.Name}}'
{{- end}}
{{end -}}

{{- if isStructType $type }}
@dataclass
class {{$type.Name}}(BaseDataClass):
      {{- range $_, $field := $type.Fields}}
        {{- $isExportable := true -}}
        {{- range $meta := $field.Meta -}}
          {{- if exists $meta "json" -}}
            {{- if eq (get $meta "json") "-" -}}
                {{- $isExportable = false}}
            {{- end -}}
        {{- end -}}
        {{- end}}
        {{if and $isExportable (not $field.Optional) -}}{{.Name}} : {{template "type" dict "Type" .Type "TypeMap" $typeMap}} {{- end -}}
        {{- end -}}
        {{- range $_, $field := $type.Fields}}
            {{- $isExportable := true -}}
            {{- range $meta := $field.Meta -}}
            {{- if exists $meta "json" -}}
                {{- if eq (get $meta "json") "-" -}}
                    {{- $isExportable = false -}}
                {{- end -}}
            {{- end }}
            {{- end }}
        {{if and $isExportable $field.Optional -}}{{.Name}} : {{template "type" dict "Type" .Type "TypeMap" $typeMap}} = None{{- end -}}
            {{- end}}


{{end -}}
{{end -}}
{{end -}}


{{if $services}}
{{- range $_, $service := $services}}
{{- range $_, $method := .Methods}}
@dataclass
class {{$method.Name}}Args(BaseDataClass):
{{- range $_, $input := $method.Inputs}}
    {{$input.Name}}{{if $input.Optional}}: Optional[{{template "type" dict "Type" .Type "TypeMap" $typeMap}}]{{else}}:  {{template "type" dict "Type" .Type "TypeMap" $typeMap}}{{- end}}
{{- end}}


@dataclass
class {{$method.Name}}Return(BaseDataClass):
{{- if $method.Outputs}}
{{- range $_, $output := $method.Outputs}}
    {{$output.Name}}{{if $output.Optional}}: Optional[{{template "type" dict "Type" .Type "TypeMap" $typeMap}}]{{else}}: {{template "type" dict "Type" .Type "TypeMap" $typeMap}}{{end}}
{{- end}}
{{else}}
    pass
{{- end}}
{{- end}}

{{end}}

{{- range $_, $method := .Methods}}
@dataclass
class {{$method.Name}}Args:
{{- range .Inputs}}
    {{.Name}}{{if .Optional}} = None{{end}}: {{template "type" dict "Type" .Type "TypeMap" $typeMap}}
{{- end}}
{{- end}}

{{- range $_, $method := .Methods}}
@dataclass
class {{$method.Name}}Return:
{{- range .Outputs}}
    {{.Name}}{{if .Optional}} = None{{end}}: {{template "type" dict "Type" .Type "TypeMap" $typeMap}}
{{- end}}
{{- end}}
{{end}}
{{- end}}
