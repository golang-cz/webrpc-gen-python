{{define "types"}}
{{- $typeMap := .TypeMap -}}
{{- $types := .Types -}}
{{- $services := .Services -}}

#
# Imports
#
from enum import Enum
from abc import ABC, abstractmethod
from dataclasses import dataclass
import typing
import json
#
# Types
#
{{if $types -}}
{{range $_i, $type := $types -}}

{{if isEnumType $type }}
class {{$type.Name}}(Enum):
{{- range $i, $field := $type.Fields}}
  {{- if $i}},{{end}}
  {{$field.Name}} = '{{$field.Name}}'
{{- end}}
{{end -}}

{{- if isStructType $type }}
class {{$type.Name}}:
    def __init__(self, {{ range .Fields}}{{ end }}
      {{- range $_, $field := $type.Fields}}
        {{- $isExportable := true -}}
        {{- range $meta := $field.Meta -}}
          {{- if exists $meta "json" -}}
            {{- if eq (get $meta "json") "-" -}}
                {{- $isExportable = false}}
            {{- end -}}
        {{- end }}
        {{- end }}
        {{if $isExportable -}}{{.Name}}{{if .Optional}} = None{{end}},{{- end -}}
        {{- end}}
    ):
        {{- range $_, $field := $type.Fields}}
        self.{{.Name}} = {{.Name}}
        {{- end}}
    def to_dict(self):
        return {
        {{- range $_, $field := $type.Fields}}
        "{{.Name}}" : self.{{.Name}},
        {{- end}}
        }
        

{{end -}}
{{end -}}
{{end -}}

{{if $services}}
{{- range $_, $service := $services}}

{{- range $_, $method := .Methods}}
@dataclass
class {{$method.Name}}Args(ABC):
{{- range $_, $input := $method.Inputs}}
    {{$input.Name}}{{if $input.Optional}}: Optional[{{$input.Type}}]{{else}}: {{$input.Type}}{{end}}
{{- end}}
    def to_dict(self):
        return json.dumps(self, default=lambda o: o.__dict__)

@dataclass
class {{$method.Name}}Return(ABC):
{{- range $_, $output := $method.Outputs}}
    {{$output.Name}}{{if $output.Optional}}: Optional[{{$output.Type}}]{{else}}: {{$output.Type}}{{end}}
{{- end}}
    def to_dict(self):
        return {
        {{- range $_, $output := $method.Outputs}}
        "{{$output.Name}}" : self.{{$output.Name}}.to_dict(),
        {{- end}}
        }
{{- end}}

{{end}}

{{- range $_, $method := .Methods}}
@dataclass
class {{$method.Name}}Args:
{{- range .Inputs}}
    {{.Name}}{{if .Optional}} = None{{end}}: {{template "type" dict "Type" .Type "TypeMap" $typeMap}}
{{- end}}
{{- end}}

{{- range $_, $method := .Methods}}
@dataclass
class {{$method.Name}}Return:
{{- range .Outputs}}
    {{.Name}}{{if .Optional}} = None{{end}}: {{template "type" dict "Type" .Type "TypeMap" $typeMap}}
{{- end}}
{{- end}}
{{end}}
{{- end}}
