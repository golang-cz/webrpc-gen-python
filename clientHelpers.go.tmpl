{{- define "client_helpers" -}}
class WebRPCError(Exception):
    def __init__(self, code: str, msg: str, status: int):
        self.code = code
        self.msg = msg
        self.status = status
        super().__init__(msg)

def create_http_request(body=None, headers=None):
    if body is None:
        body = {}
    if headers is None:
        headers = {}
    headers["Content-Type"] = "application/json"
    return {
        "method": "POST",
        "headers": headers,
        "body": json.dumps(body)
    }

def build_response(response):
    text = response.text
    try:
        data = json.loads(text)
    except json.JSONDecodeError as err:
        raise WebRPCError("unknown", f"expecting JSON, got: {text}", response.status_code)
    if not response.ok:
        raise WebRPCError(data["code"], data["msg"], response.status_code)
    return data

def fetch(url, init=None):
    response = requests.post(url, **(init or {}))
    response.raise_for_status()
    return response
{{- end -}}
