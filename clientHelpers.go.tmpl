{{define "client_helpers"}}
{{- $webrpcErrors := .WebrpcErrors -}}
{{- $schemaErrors := .SchemaErrors -}}

import aiohttp




def create_http_request(body=None, headers=None):
    if body is None:
        body = {}
    if headers is None:
        headers = {}
    headers["Content-Type"] = "application/json"
    return {
        "method": "POST",
        "headers": headers,
        "body": json.dumps(body),
    }

async def build_response(response):
    text = await response.text()
    try:
        data = json.loads(text)
    except Exception as error:
        raise WebrpcBadResponseError(
            status=response.status,
            cause=f"JSON.parse(): {str(error)}: response text: {text}"
        )
    if not response.ok:
        code = data.get("code", 0) if isinstance(data, dict) else 0
        raise (webrpc_error_by_code.get(code) or WebrpcError)(data)
    return data


class WebrpcError(Exception):
    def __init__(self, name=None, code=0, message=None, status=0, cause=None):
        super().__init__(message)
        self.name = name or "WebrpcError"
        self.code = code if isinstance(code, int) else 0
        self.message = message or f"endpoint error {self.code}"
        self.status = status if isinstance(status, int) else 0
        self.cause = cause

    @classmethod
    def new(cls, payload):
        return cls(
            payload.get("error"),
            payload.get("code", 0),
            payload.get("message") or payload.get("msg"),
            payload.get("status", 0),
            payload.get("cause"),
        )


# Webrpc errors
{{ range $_, $error := $webrpcErrors}}
class {{ $error.Name }}Error(WebrpcError):
    def __init__(self, name="{{ $error.Name }}", code={{ $error.Code }}, message="{{ $error.Message }}", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
{{- end}}

# Schema errors
{{ range $_, $error := $schemaErrors}}
class {{ $error.Name }}Error(WebrpcError):
    def __init__(self, name="{{ $error.Name }}", code={{ $error.Code }}, message="{{ $error.Message }}", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
{{- end}}

errors = {
{{- range $_, $error := $webrpcErrors}}
    "{{ $error.Name }}": "{{ $error.Name }}",
{{- end}}
{{- range $_, $error := $schemaErrors}}
    "{{ $error.Name }}": "{{ $error.Name }}",
{{- end}}
}

webrpc_error_by_code = {
{{- range $_, $error := $webrpcErrors}}
    {{ $error.Code }}: {{ $error.Name }}Error,
{{- end}}
{{- range $_, $error := $schemaErrors}}
    {{ $error.Code }}: {{ $error.Name }}Error,
{{- end}}
}

async def fetch(input, init=None):
    response = await aiohttp.request("POST", input, headers=init.get("headers"), json=init.get("body"))
    return response
{{end}}