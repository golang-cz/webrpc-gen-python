{{define "client_helpers"}}
{{- $webrpcErrors := .WebrpcErrors -}}
{{- $schemaErrors := .SchemaErrors -}}

class WebrpcError(Exception):
    def __init__(self, name=None, code=0, message=None, status=0, cause=None):
        super().__init__(message)
        self.name = name or "WebrpcError"
        self.code = code if isinstance(code, int) else 0
        self.message = message or f"endpoint error {self.code}"
        self.status = status if isinstance(status, int) else 0
        self.cause = cause

    @classmethod
    def new(cls, payload):
        return cls(
            payload.get("error"),
            payload.get("code", 0),
            payload.get("message") or payload.get("msg"),
            payload.get("status", 0),
            payload.get("cause"),
        )


# Webrpc errors
{{ range $_, $error := $webrpcErrors}}
class {{ $error.Name }}Error(WebrpcError):
    def __init__(self, name="{{ $error.Name }}", code={{ $error.Code }}, message="{{ $error.Message }}", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
{{- end}}

# Schema errors
{{ range $_, $error := $schemaErrors}}
class {{ $error.Name }}Error(WebrpcError):
    def __init__(self, name="{{ $error.Name }}", code={{ $error.Code }}, message="{{ $error.Message }}", status=0, cause=None):
        super().__init__(name, code, message, status, cause)
{{- end}}

errors = {
{{- range $_, $error := $webrpcErrors}}
    "{{ $error.Name }}": "{{ $error.Name }}",
{{- end}}
{{- range $_, $error := $schemaErrors}}
    "{{ $error.Name }}": "{{ $error.Name }}",
{{- end}}
}

webrpc_error_by_code = {
{{- range $_, $error := $webrpcErrors}}
    {{ $error.Code }}: {{ $error.Name }}Error,
{{- end}}
{{- range $_, $error := $schemaErrors}}
    {{ $error.Code }}: {{ $error.Name }}Error,
{{- end}}
}
{{end}}